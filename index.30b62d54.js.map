{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAAM,EAAW,SAAS,aAAa,CAAC,UAClC,EAAY,SAAS,aAAa,CAAC,SAAS,IAAI,CAChD,EAAa,SAAS,aAAa,CAAC,eAEpC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAc,SAAS,aAAa,CAAC,iBAIvC,EAAQ,EAER,EAAQ,CACV,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CAwBD,SAAS,IACP,GAAK,IAQL,IAJA,IAAM,EAAQ,KAAK,MAAM,GAAK,GAAM,EAAI,EAEpC,EAAQ,CAAA,EAEL,CAAC,GAAO,CACb,IAAM,EAAM,KAAK,KAAK,CAAC,AA3Cd,EA2Cc,KAAK,MAAM,IAC5B,EAAM,KAAK,KAAK,CAAC,AA3CX,EA2CW,KAAK,MAAM,GAEV,CAAA,IAApB,CAAK,CAAC,EAAI,CAAC,EAAI,GACjB,CAAK,CAAC,EAAI,CAAC,EAAI,CAAG,EAClB,EAAQ,CAAA,EAER,IAEJ,CACF,CAEA,SAAS,IACP,IAAK,IAYa,EAAM,EAZf,EAAM,EAAG,EAxDP,EAwDmB,IAC5B,IAAK,IAAI,EAAM,EAAG,EAxDN,EAwDqB,IAWjB,EAVM,CAAS,CAAC,EAAI,CAAC,KAAK,CAAC,EAAI,CAUzB,EATR,CAAK,CAAC,EAAI,CAAC,EAAI,CAU/B,EAAK,SAAS,CAAG,GACjB,EAAK,SAAS,CAAC,KAAK,CAAG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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar startBtn = document.querySelector(\".start\");\nvar fieldRows = document.querySelector(\"tbody\").rows;\nvar scoreBoard = document.querySelector(\".game-score\");\nvar messageStart = document.querySelector(\".message-start\");\nvar messageWin = document.querySelector(\".message-win\");\nvar messageLose = document.querySelector(\".message-lose\");\nvar rows = 4;\nvar columns = 4;\nvar score = 0;\nvar field = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nstartBtn.addEventListener(\"click\", function() {\n    field = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    score = 0;\n    updateTheGame();\n    setNewCell();\n    setNewCell();\n    startBtn.classList.add(\"restart\");\n    startBtn.innerText = \"Restart\";\n    messageStart.classList.add(\"hidden\");\n    messageWin.classList.add(\"hidden\");\n    messageLose.classList.add(\"hidden\");\n});\nfunction setNewCell() {\n    if (!checkIfEmpty()) return;\n    var value = Math.random() > 0.1 ? 2 : 4;\n    var check = false;\n    while(!check){\n        var row = Math.floor(Math.random() * rows);\n        var col = Math.floor(Math.random() * columns);\n        if (field[row][col] === 0) {\n            field[row][col] = value;\n            check = true;\n            updateTheGame();\n        }\n    }\n}\nfunction updateTheGame() {\n    for(var row = 0; row < rows; row++)for(var col = 0; col < columns; col++){\n        var currentCell = fieldRows[row].cells[col];\n        var num = field[row][col];\n        updateCell(currentCell, num);\n    }\n    scoreBoard.innerText = String(score);\n}\nfunction updateCell(cell, num) {\n    cell.innerText = \"\";\n    cell.classList.value = \"\";\n    cell.classList.add(\"field-cell\");\n    if (num > 0) {\n        cell.innerText = String(num);\n        cell.classList.add(\"field-cell--\".concat(String(num)));\n    }\n}\nfunction checkIfEmpty() {\n    for(var row = 0; row < rows; row++)for(var col = 0; col < columns; col++){\n        if (field[row][col] === 0) return true;\n    }\n    return false;\n}\ndocument.addEventListener(\"keyup\", function(e) {\n    if (startBtn.classList.contains(\"restart\")) switch(e.code){\n        case \"ArrowLeft\":\n            slideLeft();\n            break;\n        case \"ArrowRight\":\n            slideRight();\n            break;\n        case \"ArrowUp\":\n            slideUp();\n            break;\n        case \"ArrowDown\":\n            slideDown();\n            break;\n    }\n    if (!checkIfPossible()) checkIfLose();\n});\nfunction filterRow(row) {\n    return row.filter(function(el) {\n        return el !== 0;\n    });\n}\nfunction slide(row) {\n    var newRow = filterRow(row);\n    for(var i = 0; i < row.length - 1; i++)if (newRow[i] === newRow[i + 1] && isFinite(newRow[i])) {\n        newRow[i] *= 2;\n        newRow[i + 1] = 0;\n        score += newRow[i];\n        checkIfWin(newRow[i]);\n    }\n    newRow = filterRow(newRow);\n    while(newRow.length < columns)newRow.push(0);\n    return newRow;\n}\nfunction checkIfWin(value) {\n    if (value === 2048) {\n        messageWin.classList.remove(\"hidden\");\n        startBtn.classList.remove(\"restart\");\n        startBtn.innerText = \"Start\";\n    }\n}\nfunction slideLeft() {\n    var initialField = field.map(function(row) {\n        return _to_consumable_array(row);\n    });\n    for(var r = 0; r < rows; r++){\n        var row = field[r];\n        row = slide(row);\n        field[r] = row;\n    }\n    if (!isArraysEquals(initialField, field)) setNewCell();\n    updateTheGame();\n}\nfunction slideRight() {\n    var initialField = field.map(function(row) {\n        return _to_consumable_array(row);\n    });\n    for(var r = 0; r < rows; r++){\n        var row = field[r];\n        row.reverse();\n        row = slide(row);\n        row.reverse();\n        field[r] = row;\n    }\n    if (!isArraysEquals(initialField, field)) setNewCell();\n    updateTheGame();\n}\nfunction slideUp() {\n    var initialField = field.map(function(row) {\n        return _to_consumable_array(row);\n    });\n    for(var col = 0; col < columns; col++){\n        var row = [\n            field[0][col],\n            field[1][col],\n            field[2][col],\n            field[3][col]\n        ];\n        row = slide(row);\n        for(var i = 0; i < columns; i++)field[i][col] = row[i];\n    }\n    if (!isArraysEquals(initialField, field)) setNewCell();\n    updateTheGame();\n}\nfunction slideDown() {\n    var initialField = field.map(function(row) {\n        return _to_consumable_array(row);\n    });\n    for(var col = 0; col < columns; col++){\n        var row = [\n            field[0][col],\n            field[1][col],\n            field[2][col],\n            field[3][col]\n        ];\n        row.reverse();\n        row = slide(row);\n        row.reverse();\n        for(var i = 0; i < columns; i++)field[i][col] = row[i];\n    }\n    if (!isArraysEquals(initialField, field)) setNewCell();\n    updateTheGame();\n}\nfunction checkIfPossible() {\n    var check = false;\n    for(var row = 0; row < rows; row++)for(var col = 0; col < columns; col++){\n        if (row < 3) {\n            if (field[row][col] === field[row + 1][col] || field[row][col] === field[row][col + 1]) check = true;\n        }\n    }\n    if (!check && !checkIfEmpty()) return false;\n    return true;\n}\nfunction checkIfLose() {\n    messageLose.classList.remove(\"hidden\");\n    startBtn.classList.remove(\"restart\");\n    startBtn.innerText = \"Start\";\n}\nfunction isArraysEquals(arrayA, arrayB) {\n    for(var i = 0; i < arrayA.length; i++)for(var j = 0; j < arrayA[i].length; j++){\n        if (arrayA[i][j] !== arrayB[i][j]) return false;\n    }\n    return true;\n}\n\n//# sourceMappingURL=index.30b62d54.js.map\n","'use strict';\n\nconst startBtn = document.querySelector('.start');\nconst fieldRows = document.querySelector('tbody').rows;\nconst scoreBoard = document.querySelector('.game-score');\n\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nconst rows = 4;\nconst columns = 4;\nlet score = 0;\n\nlet field = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nstartBtn.addEventListener('click', () => {\n  field = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  score = 0;\n\n  updateTheGame();\n  setNewCell();\n  setNewCell();\n\n  startBtn.classList.add('restart');\n  startBtn.innerText = 'Restart';\n\n  messageStart.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n});\n\nfunction setNewCell() {\n  if (!checkIfEmpty()) {\n    return;\n  }\n\n  const value = Math.random() > 0.1 ? 2 : 4;\n\n  let check = false;\n\n  while (!check) {\n    const row = Math.floor(Math.random() * rows);\n    const col = Math.floor(Math.random() * columns);\n\n    if (field[row][col] === 0) {\n      field[row][col] = value;\n      check = true;\n\n      updateTheGame();\n    }\n  }\n}\n\nfunction updateTheGame() {\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < columns; col++) {\n      const currentCell = fieldRows[row].cells[col];\n      const num = field[row][col];\n\n      updateCell(currentCell, num);\n    }\n  }\n\n  scoreBoard.innerText = String(score);\n}\n\nfunction updateCell(cell, num) {\n  cell.innerText = '';\n  cell.classList.value = '';\n  cell.classList.add('field-cell');\n\n  if (num > 0) {\n    cell.innerText = String(num);\n    cell.classList.add(`field-cell--${String(num)}`);\n  }\n}\n\nfunction checkIfEmpty() {\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < columns; col++) {\n      if (field[row][col] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\ndocument.addEventListener('keyup', e => {\n  if (startBtn.classList.contains('restart')) {\n    switch (e.code) {\n      case 'ArrowLeft':\n        slideLeft();\n        // setNewCell();\n        break;\n\n      case 'ArrowRight':\n        slideRight();\n        // setNewCell();\n        break;\n\n      case 'ArrowUp':\n        slideUp();\n        // setNewCell();\n        break;\n\n      case 'ArrowDown':\n        slideDown();\n        // setNewCell();\n        break;\n    }\n  }\n\n  if (!checkIfPossible()) {\n    checkIfLose();\n  }\n});\n\nfunction filterRow(row) {\n  return row.filter(el => el !== 0);\n}\n\nfunction slide(row) {\n  let newRow = filterRow(row);\n\n  for (let i = 0; i < row.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1] && isFinite(newRow[i])) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n      checkIfWin(newRow[i]);\n    }\n  }\n  newRow = filterRow(newRow);\n\n  while (newRow.length < columns) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction checkIfWin(value) {\n  if (value === 2048) {\n    messageWin.classList.remove('hidden');\n    startBtn.classList.remove('restart');\n    startBtn.innerText = 'Start';\n  }\n}\n\nfunction slideLeft() {\n  const initialField = field.map(row => [...row]);\n\n  for (let r = 0; r < rows; r++) {\n    let row = field[r];\n\n    row = slide(row);\n    field[r] = row;\n  }\n\n  if (!isArraysEquals(initialField, field)) {\n    setNewCell();\n  }\n\n  updateTheGame();\n}\n\nfunction slideRight() {\n  const initialField = field.map(row => [...row]);\n\n  for (let r = 0; r < rows; r++) {\n    let row = field[r];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n    field[r] = row;\n  }\n\n  if (!isArraysEquals(initialField, field)) {\n    setNewCell();\n  }\n\n  updateTheGame();\n}\n\nfunction slideUp() {\n  const initialField = field.map(row => [...row]);\n\n  for (let col = 0; col < columns; col++) {\n    let row = [field[0][col], field[1][col], field[2][col], field[3][col]];\n\n    row = slide(row);\n\n    for (let i = 0; i < columns; i++) {\n      field[i][col] = row[i];\n    }\n  }\n\n  if (!isArraysEquals(initialField, field)) {\n    setNewCell();\n  }\n\n  updateTheGame();\n}\n\nfunction slideDown() {\n  const initialField = field.map(row => [...row]);\n\n  for (let col = 0; col < columns; col++) {\n    let row = [field[0][col], field[1][col], field[2][col], field[3][col]];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n\n    for (let i = 0; i < columns; i++) {\n      field[i][col] = row[i];\n    }\n  }\n\n  if (!isArraysEquals(initialField, field)) {\n    setNewCell();\n  }\n\n  updateTheGame();\n}\n\nfunction checkIfPossible() {\n  let check = false;\n\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < columns; col++) {\n      if (row < 3) {\n        if (field[row][col] === field[row + 1][col]\n          || field[row][col] === field[row][col + 1]) {\n          check = true;\n        }\n      }\n    }\n  }\n\n  if (!check && !checkIfEmpty()) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction checkIfLose() {\n  messageLose.classList.remove('hidden');\n  startBtn.classList.remove('restart');\n  startBtn.innerText = 'Start';\n}\n\nfunction isArraysEquals(arrayA, arrayB) {\n  for (let i = 0; i < arrayA.length; i++) {\n    for (let j = 0; j < arrayA[i].length; j++) {\n      if (arrayA[i][j] !== arrayB[i][j]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","startBtn","document","querySelector","fieldRows","rows","scoreBoard","messageStart","messageWin","messageLose","score","field","setNewCell","checkIfEmpty","value","Math","random","check","row","floor","col","updateTheGame","cell","num","cells","innerText","classList","add","String","concat","filterRow","filter","el","slide","newRow","isFinite","remove","push","isArraysEquals","arrayA","arrayB","j","addEventListener","e","contains","code","slideLeft","initialField","map","r","slideRight","reverse","slideUp","slideDown","checkIfPossible"],"version":3,"file":"index.30b62d54.js.map"}